/**
 * @file
 * Simple functional impl 
 * @copyright
 * Copyright (c) 2019-2023, Joshua Scoggins
 * 
 * This software is provided 'as-is', without any express or implied
 * warranty. In no event will the authors be held liable for any damages
 * arising from the use of this software.
 * 
 * Permission is granted to anyone to use this software for any purpose,
 * including commercial applications, and to alter it and redistribute it
 * freely, subject to the following restrictions:
 * 
 * 1. The origin of this software must not be misrepresented; you must not
 *    claim that you wrote the original software. If you use this software
 *    in a product, an acknowledgment in the product documentation would be
 *    appreciated but is not required.
 * 2. Altered source versions must be plainly marked as such, and must not be
 *    misrepresented as being the original software.
 * 3. This notice may not be removed or altered from any source distribution.
 */

#ifndef LIBSTD_FUNCTIONAL_H__
#define LIBSTD_FUNCTIONAL_H__
namespace std {
template<typename T>
struct plus {
	constexpr T operator()(const T& lhs, const T& rhs) const 
	{
		return lhs + rhs;
	}
};

template<typename T>
struct minus {
	constexpr T operator()(const T& lhs, const T& rhs) const 
	{
		return lhs - rhs;
	}
};
template<typename T>
struct multiplies {
	constexpr T operator()(const T& lhs, const T& rhs) const 
	{
		return lhs * rhs;
	}
};
template<typename T>
struct divides {
	constexpr T operator()(const T& lhs, const T& rhs) const 
	{
		return lhs / rhs;
	}
};
template<typename T>
struct modulus {
	constexpr T operator()(const T& lhs, const T& rhs) const 
	{
		return lhs % rhs;
	}
};
/// @todo provide std::{plus,minus,multiplies,divides,modulus}<void> specializations
} // end namespace std

#endif // end !defined(LIBSTD_FUNCTIONAL_H__)

