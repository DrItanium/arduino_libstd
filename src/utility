/**
 * @file
 * standard utility header 
 * @copyright 
 * Copyright (c) 2019-2020, Joshua Scoggins
 * 
 * This software is provided 'as-is', without any express or implied
 * warranty. In no event will the authors be held liable for any damages
 * arising from the use of this software.
 * 
 * Permission is granted to anyone to use this software for any purpose,
 * including commercial applications, and to alter it and redistribute it
 * freely, subject to the following restrictions:
 * 
 * 1. The origin of this software must not be misrepresented; you must not
 *    claim that you wrote the original software. If you use this software
 *    in a product, an acknowledgment in the product documentation would be
 *    appreciated but is not required.
 * 2. Altered source versions must be plainly marked as such, and must not be
 *    misrepresented as being the original software.
 * 3. This notice may not be removed or altered from any source distribution.
 */
#ifndef LIBSTD_UTILITY_H__
#define LIBSTD_UTILITY_H__
// basic utility implementation
#include <cstdint>
namespace std {
    // declval implementation
    template<typename T, typename U = T&&> U __declval(int);
    template<typename T> T __declval(long);
    template<typename T> auto declval() noexcept -> decltype(__declval<T>(0));

    template<typename T1, typename T2>
    struct pair {
        using first_type = T1;
        using second_type = T2;
        first_type first;
        second_type second;
    };

	template<typename T, T... I> 
	struct integer_sequence {
		using value_type = T;
		static constexpr size_t size() noexcept { return sizeof...(I); }
	};

} // end namespace std
#endif // end LIBSTD_UTILITY_H__
