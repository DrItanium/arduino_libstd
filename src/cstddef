/**
 * @file
 * cstddefinterface
 * @copyright
 * Copyright (c) 2019-2023, Joshua Scoggins
 * 
 * This software is provided 'as-is', without any express or implied
 * warranty. In no event will the authors be held liable for any damages
 * arising from the use of this software.
 * 
 * Permission is granted to anyone to use this software for any purpose,
 * including commercial applications, and to alter it and redistribute it
 * freely, subject to the following restrictions:
 * 
 * 1. The origin of this software must not be misrepresented; you must not
 *    claim that you wrote the original software. If you use this software
 *    in a product, an acknowledgment in the product documentation would be
 *    appreciated but is not required.
 * 2. Altered source versions must be plainly marked as such, and must not be
 *    misrepresented as being the original software.
 * 3. This notice may not be removed or altered from any source distribution.
 */

#ifndef LIBSTD_CSTDDEF_H__
#define LIBSTD_CSTDDEF_H__
extern "C" {
#include <stddef.h>
}
namespace std {
    using nullptr_t = decltype(nullptr);
    using ptrdiff_t = ::ptrdiff_t;
    using size_t = ::size_t;
    using max_align_t = ::max_align_t;

    enum class byte : unsigned char { };

    template<typename T> struct _ByteOperand { };
#define X(ty) \
    template<> struct _ByteOperand< ty > { using __Type = byte; }
    X(bool);
    X(char);
    X(signed char);
    X(unsigned char);
    X(short);
    X(unsigned short);
    X(int);
    X(unsigned int);
    X(long);
    X(unsigned long);
    X(long long);
    X(unsigned long long);
#undef X
    template<typename T>
    using _ByteOperand_t = typename _ByteOperand<T>::__Type;

    template<typename T>
    constexpr _ByteOperand_t<T>& operator<<=(byte& b, T shift) noexcept {
        b = byte(static_cast<unsigned char>(b) << shift);
        return b;
    }
    template<typename T>
    constexpr _ByteOperand_t<T> operator<<(byte b, T shift) noexcept {
        return byte(static_cast<unsigned char>(b) << shift);
    }
    template<typename T>
    constexpr _ByteOperand_t<T>& operator>>=(byte& b, T shift) noexcept {
        b = byte(static_cast<unsigned char>(b) >> shift);
        return b;
    }
    template<typename T>
    constexpr _ByteOperand_t<T> operator>>(byte b, T shift) noexcept {
        return byte(static_cast<unsigned char>(b) >> shift);
    }

    constexpr byte& operator|=(byte& l, byte r) noexcept {
        l = byte(static_cast<unsigned char>(l) | static_cast<unsigned char>(r));
        return l;
    }
    constexpr byte operator|(byte l, byte r) noexcept {
        return byte(static_cast<unsigned char>(l) | static_cast<unsigned char>(r));
    }
    constexpr byte& operator&=(byte& l, byte r) noexcept {
        l = byte(static_cast<unsigned char>(l) & static_cast<unsigned char>(r));
        return l;
    }
    constexpr byte operator&(byte l, byte r) noexcept {
        return byte(static_cast<unsigned char>(l) & static_cast<unsigned char>(r));
    }
    constexpr byte& operator^=(byte& l, byte r) noexcept {
        l = byte(static_cast<unsigned char>(l) ^ static_cast<unsigned char>(r));
        return l;
    }
    constexpr byte operator^(byte l, byte r) noexcept {
        return byte(static_cast<unsigned char>(l) ^ static_cast<unsigned char>(r));
    }
    constexpr byte operator~(byte l) noexcept {
        return byte(~static_cast<unsigned char>(l));
    }
    template<typename T>
    constexpr T to_integer(byte b) noexcept {
        return T(b);
    }
} // end namespace std

#endif // end LIBSTD_CSTDDEF_H__
